(* 1 Lexical grammar *)
(* 1.1 Lexical elements *)
token
    = keyword
    | identifier
    | constant
    | string-literal
    | punctuator;

preprocessing-token
    = header-name
    | identifier
    | pp-number
    | character-constant
    | string-literal
    | punctuator
    | ? each universal-character-name that cannot be one of the above ?
    | ? each non-white-space character that cannot be one of the above ?;

(* 1.2 Keywords *)
keyword
    = 'alignas'
    | 'alignof'
    | 'auto'
    | 'bool'
    | 'break'
    | 'case'
    | 'char'
    | 'const'
    | 'constexpr'
    | 'continue'
    | 'default'
    | 'do'
    | 'double'
    | 'else'
    | 'enum'
    | 'extern'
    | 'false'
    | 'float'
    | 'for'
    | 'goto'
    | 'if'
    | 'inline'
    | 'int'
    | 'long'
    | 'nullptr'
    | 'register'
    | 'restrict'
    | 'return'
    | 'short'
    | 'signed'
    | 'sizeof'
    | 'static'
    | 'static_assert'
    | 'struct'
    | 'switch'
    | 'thread_local'
    | 'true'
    | 'typedef'
    | 'typeof'
    | 'typeof_unqual'
    | 'union'
    | 'unsigned'
    | 'void'
    | 'volatile'
    | 'while'
    | '_Atomic'
    | '_BigInt'
    | '_Complex'
    | '_Decimal128'
    | '_Decimal32'
    | '_Decimal64'
    | '_Generic'
    | '_Imaginary'
    | "_Noreturn";

(* 1.3 Identifiers *)
identifier
    = identifier-start
    | identifier;

identifier-start
    = nondigit
    | XID_Start-character
    | universal-character-name-of-class-XID_Start;

identifier-continue
    = digit
    | nondigit
    | XID_Continue-character
    | universal-character-name-of-class-XID_Continue;

nondigit
    = '_'
    | 'a'
    | 'b'
    | 'c'
    | 'd'
    | 'e'
    | 'f'
    | 'g'
    | 'h'
    | 'i'
    | 'j'
    | 'k'
    | 'l'
    | 'm'
    | 'n'
    | 'o'
    | 'p'
    | 'q'
    | 'r'
    | 's'
    | 't'
    | 'u'
    | 'v'
    | 'w'
    | 'x'
    | 'y'
    | 'z'
    | 'A'
    | 'B'
    | 'C'
    | 'D'
    | 'E'
    | 'F'
    | 'G'
    | 'H'
    | 'I'
    | 'J'
    | 'K'
    | 'L'
    | 'M'
    | 'N'
    | 'O'
    | 'P'
    | 'Q'
    | 'R'
    | 'S'
    | 'T'
    | 'U'
    | 'V'
    | 'W'
    | 'X'
    | 'Y'
    | 'Z';

digit
    = '0'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

(* 1.4 Universal character names *)
universal-character-name
    = '\u', hex-quad
    | '\U', hex-quad, hex-quad;

hex-quad
    = hexadecimal-digit, hexadecimal-digit, hexadecimal-digit, hexadecimal-digit;

(* 1.5 Constants *)
constant
    = integer-constant
    | floating-constant
    | enumeration-constant
    | character-constant
    | predefined-constant;

integer-constant
    = decimal-constant, [ integer-constant ]
    | octal-constant, [ integer-constant ]
    | hexadecimal-constant, [ integer-constant ]
    | binary-constant, [ integer-constant ];

decimal-constant
    = nonzero-digit
    | decimal-constant, [ "'" ], digit;

octal-constant
    = '0'
    | octal-constant, [ "'" ], octal-digit;

hexadecimal-constant
    = hexadecimal-prefix, hexadecimal-digit-sequence;

binary-constant
    = binary-prefix, binary-digit
    | binary-constant, [ "'" ], binary-digit;

hexadecimal-prefix
    = '0x'
    | '0X';

binary-prefix
    = '0b'
    | '0B';

nonzero-digit
    = '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

octal-digit
    = '0'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7';

hexadecimal-digit-sequence
    = hexadecimal-digit
    | hexadecimal-digit-sequence, [ "'" ], hexadecimal-digit;

hexadecimal-digit
    = '0'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    | 'a'
    | 'b'
    | 'c'
    | 'd'
    | 'e'
    | 'f'
    | 'A'
    | 'B'
    | 'C'
    | 'D'
    | 'E'
    | 'F';

binary-digit
    = '0'
    | '1';

integer-suffix
    = unsigned-suffix, [ long-suffix ]
    | unsigned-suffix, long-long-suffix
    | unsigned-suffix, bit-precise-int-suffix
    | long-suffix, [ unsigned-suffix ]
    | long-long-suffix, [ unsigned-suffix ]
    | bit-precise-int-suffix, [ unsigned-suffix ];

bit-precise-int-suffix
    = 'wb'
    | 'WB';

unsigned-suffix
    = 'u'
    | 'U';

long-suffix
    = 'l'
    | 'L';

long-long-suffix
    = 'll'
    | 'LL';

floating-constant
    = decimal-floating-constant
    | hexadecimal-floating-constant;

decimal-floating-constant
    = fractional-constant, [ exponent-part ], [ floating-suffix ]
    | digit-sequence, exponent-part, [ floating-suffix ];

hexadecimal-floating-constant
    = hexadecimal-prefix, hexadecimal-fractional-constant, binary-exponent-part, [ floating-suffix ]
    | hexadecimal-prefix, hexadecimal-digit-sequence, binary-exponent-part, [ floating-suffix ];

fractional-constant
    = [ digit-sequence ], '.', digit-sequence
    | digit-sequence, '.';

exponent-part
    = 'e', [ sign ], digit-sequence
    | 'E', [ sign ], digit-sequence;

sign
    = '+' 
    | '-';

digit-sequence
    = digit
    | digit-sequence, [ "'" ], digit;

hexadecimal-fractional-constant
    = [ hexadecimal-digit-sequence ], '.', hexadecimal-digit-sequence
    | hexadecimal-digit-sequence, '.';

binary-exponent-part
    = 'p', [ sign ], digit-sequence
    | 'P', [ sign ], digit-sequence;

floating-suffix
    = 'f'
    | 'l'
    | 'F'
    | 'L'
    | 'df'
    | 'dd'
    | 'dl'
    | 'DF'
    | 'DD'
    | 'DL';

enumeration-constant
    = identifier;

character-constant
    = [ encoding-prefix ], "'", c-char-sequence, "'";

encoding-prefix
    = 'u8'
    | 'u'
    | 'U'
    | 'L';

c-char-sequence
    = c-char
    | c-char-sequence, c-char;

c-char
    = ? any member of the source character set except the single-quote , backslash , or new-line character ?
    | escape-sequence;

escape-sequence
    = simple-escape-sequence
    | octal-escape-sequence
    | hexadecimal-escape-sequence
    | universal-character-name;

simple-escape-sequence
    = "\'"
    | '\"'
    | '\?'
    | '\\'
    | '\a'
    | '\b'
    | '\f'
    | '\n'
    | '\r'
    | '\t'
    | '\v';

octal-escape-sequence
    = '\', octal-digit
    | '\', octal-digit, octal-digit
    | '\', octal-digit, octal-digit, octal-digit;

hexadecimal-escape-sequence
    = '\x', hexadecimal-digit
    | hexadecimal-escape-sequence, hexadecimal-digit;

predefined-constant
    = 'false'
    | 'true'
    | 'nullptr';

(* 1.6 String literals *)
string-literal
    = [ encoding-prefix ], '"', [ s-char-sequence ], '"';

s-char-sequence
    = s-char
    | s-char-sequence, s-char;

s-char
    = ? any member of the source character set except the double-quote , backslash , or new-line character ?
    | escape-sequence;

(* 1.7 Punctuators *)
punctuator
    = '['
    | ']'
    | '('
    | ')'
    | '{'
    | '}'
    | '.'
    | '->'
    | '++'
    | '--'
    | '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    | '/'
    | '%'
    | '<<'
    | '>>'
    | '<'
    | '>'
    | '<='
    | '>='
    | '=='
    | '!='
    | '^'
    | '|'
    | '&&'
    | '||'
    | '?'
    | ':'
    | '::'
    | ';'
    | '...'
    | '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '&='
    | '^='
    | '|='
    | ','
    | '#'
    | '##'
    | '<:'
    | ':>'
    | '<%'
    | '%>'
    | '%:'
    | '%:%:';

(* 1.8 Header names *)
header-name
    = '<', h-char-sequence, '>'
    | '"', q-char-sequence, '"';

h-char-sequence
    = h-char
    | h-char-sequence, h-char;

h-char
    = ? any member of the source character set except the new-line character and ?;

q-char-sequence
    = q-char
    | q-char-sequence, q-char;

q-char
    = ? any member of the source character set except the new-line character and " ?;

(* 1.9 Preprocessing numbers *)
pp-number
    = digit
    | '.', digit
    | pp-number, identifier-continue
    | pp-number, "'", digit
    | pp-number, "'", nondigit
    | pp-number, 'e', sign
    | pp-number, 'E', sign
    | pp-number, 'p', sign
    | pp-number, 'P', sign
    | pp-number, '.';

